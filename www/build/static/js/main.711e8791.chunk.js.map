{"version":3,"sources":["logo.svg","shiny_logo.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","shinyMessage","setShinyMessage","shinyUrls","setShinyUrls","ggplotTitle","setGgplotTitle","ggplotUrl","setGgplotUrl","data","setData","window","Shiny","addCustomMessageHandler","msg","urls","fetchData","updatePlot","ggplot_url_svg","a","fetch","example_get_data_url","then","json","fetchedData","item_list","map","item","county","state","PID","url","className","src","logo","alt","shinyLogo","type","onChange","e","setInputValue","target","value","placeholder","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAe,MAA0B,iCCA1B,MAA0B,uC,eCmG1BA,MA9Ff,WACC,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAGAC,OAAOC,MAAMC,wBAAwB,sBAAsB,SAACC,GAC3DZ,EAAgBY,MASjBH,OAAOC,MAAMC,wBAAwB,QAAQ,SAACE,GAC7CX,EAAaW,GACbC,EAAUD,GACVE,EAAWF,EAAKG,mBAGjB,IAAMF,EAAS,uCAAG,WAAOD,GAAP,eAAAI,EAAA,sEACSC,MAAML,EAAKM,sBAAsBC,MAAK,SAACb,GAAD,OAC/DA,EAAKc,UAFW,OACXC,EADW,OAIjBd,EAAQc,GAJS,2CAAH,sDAOTC,EAAYhB,EAAKiB,KAAI,SAACC,GAAD,OAC1B,uCAAuBA,EAAKC,OAA5B,aAAuCD,EAAKE,MAA5C,MAASF,EAAKG,QAOTb,EAAa,SAACc,GACnBvB,EAAa,GAAD,OAAIuB,EAAJ,kBAAiB1B,KAG9B,OACC,qBAAK2B,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,gCACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,qBAAKF,IAAKG,EAAWJ,UAAU,WAAWG,IAAI,YAE/C,4DACA,wCACA,4BAAIlC,IACJ,+GACA,uBAAOoC,KAAK,OAAOC,SAzCF,SAACC,GACpB5B,OAAOC,MAAM4B,cAAc,qBAAsBD,EAAEE,OAAOC,UAyCxD,sBAAKV,UAAU,iBAAf,UACC,sBAAKA,UAAU,gBAAf,UACC,0CACU,0CADV,2CAGA,uBACCK,KAAK,OACLM,YAAY,YACZL,SAAU,SAACC,GAAD,OAAOjC,EAAeiC,EAAEE,OAAOC,UAE1C,wBACCL,KAAK,SACLO,QAAS,kBAAM3B,EAAWd,EAAUe,iBACpCc,UAAU,eAHX,2BAOCzB,EAAY,qBAAK0B,IAAK1B,EAAW4B,IAAI,YAAc,QAErD,sBAAKH,UAAU,gBAAf,UACC,gEACgC,2CADhC,mDAIA,wBACCK,KAAK,SACLO,QA9Ca,WAClB5B,EAAUb,IA8CL6B,UAAU,eAHX,yBAOA,6BAAKP,gBC/EIoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.711e8791.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/shiny_logo.ec1590fe.png\";","import { useState } from 'react';\nimport logo from './logo.svg';\nimport shinyLogo from './shiny_logo.png';\nimport './App.css';\n\nfunction App() {\n\tconst [shinyMessage, setShinyMessage] = useState('');\n\tconst [shinyUrls, setShinyUrls] = useState('');\n\tconst [ggplotTitle, setGgplotTitle] = useState('');\n\tconst [ggplotUrl, setGgplotUrl] = useState(null);\n\tconst [data, setData] = useState([]);\n\n\t/* Receiving the data through websocket */\n\twindow.Shiny.addCustomMessageHandler('message_from_shiny', (msg) => {\n\t\tsetShinyMessage(msg);\n\t});\n\n\t/* Sending the message to Shiny through websocket */\n\tconst sendMessage = (e) => {\n\t\twindow.Shiny.setInputValue('message_from_react', e.target.value);\n\t};\n\n\t/* Receiving REST API URLs */\n\twindow.Shiny.addCustomMessageHandler('urls', (urls) => {\n\t\tsetShinyUrls(urls);\n\t\tfetchData(urls);\n\t\tupdatePlot(urls.ggplot_url_svg)\n\t});\n\n\tconst fetchData = async (urls) => {\n\t\tconst fetchedData = await fetch(urls.example_get_data_url).then((data) =>\n\t\t\tdata.json()\n\t\t);\n\t\tsetData(fetchedData);\n\t};\n\n\tconst item_list = data.map((item) => (\n\t\t<li key={item.PID}>{`${item.county} (${item.state})`}</li>\n\t));\n\n\tconst updateData = () => {\n\t\tfetchData(shinyUrls);\n\t};\n\n\tconst updatePlot = (url) => {\n\t\tsetGgplotUrl(`${url}&title=${ggplotTitle}`);\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<div>\n\t\t\t\t\t<img src={logo} className='App-logo' alt='logo' />\n\t\t\t\t\t<img src={shinyLogo} className='App-logo' alt='logo' />\n\t\t\t\t</div>\n\t\t\t\t<p>I AM THE MESSAGE FROM REACT</p>\n\t\t\t\t<i>whereas</i>\n\t\t\t\t<p>{shinyMessage}</p>\n\t\t\t\t<p>but hey, you can send message back to Shiny (check your logs or notification):</p>\n\t\t\t\t<input type='text' onChange={sendMessage} />\n\t\t\t\t<div className='shiny-sections'>\n\t\t\t\t\t<div className='shiny-section'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tAnd here <code>ggplot</code> fetched from Shiny through REST API:\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='New title'\n\t\t\t\t\t\t\tonChange={(e) => setGgplotTitle(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tonClick={() => updatePlot(shinyUrls.ggplot_url_svg)}\n\t\t\t\t\t\t\tclassName='shiny-button'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUpdate title!\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{ggplotUrl ? <img src={ggplotUrl} alt='GGPLOT2'/> : null}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='shiny-section'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tAnd below random counties from <code>midwest</code> dataset\n\t\t\t\t\t\t\tfetched from Shiny through REST API:\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tonClick={updateData}\n\t\t\t\t\t\t\tclassName='shiny-button'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tReload list\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul>{item_list}</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}