{"version":3,"sources":["logo.svg","shiny_logo.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","shinyMessage","setShinyMessage","shinyUrls","setShinyUrls","data","setData","window","Shiny","addCustomMessageHandler","msg","urls","fetchData","a","fetch","example_get_data_url","then","json","fetchedData","item_list","map","item","county","state","PID","className","src","logo","alt","shinyLogo","type","onChange","e","setInputValue","target","value","ggplot_url_svg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAe,MAA0B,iCCA1B,MAA0B,uC,eCoE1BA,MA/Df,WACC,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAGAC,OAAOC,MAAMC,wBAAwB,sBAAsB,SAACC,GAC3DR,EAAgBQ,MASjBH,OAAOC,MAAMC,wBAAwB,QAAQ,SAACE,GAC7CP,EAAaO,GACbC,EAAUD,MAGX,IAAMC,EAAS,uCAAG,WAAOD,GAAP,eAAAE,EAAA,sEACSC,MAAMH,EAAKI,sBAAsBC,MAAK,SAACX,GAAD,OAC/DA,EAAKY,UAFW,OACXC,EADW,OAIjBZ,EAAQY,GAJS,2CAAH,sDAOTC,EAAYd,EAAKe,KAAI,SAACC,GAAD,OAC1B,uCAAuBA,EAAKC,OAA5B,aAAuCD,EAAKE,MAA5C,MAASF,EAAKG,QAGf,OACC,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,gCACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,qBAAKF,IAAKG,EAAWJ,UAAU,WAAWG,IAAI,YAE/C,4DAEC,uBACA,wCACA,uBACC3B,EACD,uBACA,+FACA,uBACA,uBAAO6B,KAAK,OAAOC,SArCH,SAACC,GACpBzB,OAAOC,MAAMyB,cAAc,qBAAsBD,EAAEE,OAAOC,aAsCxD,0CACU,0CADV,0BAGA,qBAAKT,IAAKvB,EAAUiC,eAAgBR,IAAI,YACxC,yDACyB,2CADzB,kCAGA,6BAAKT,UClDMkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef7f56c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/shiny_logo.ec1590fe.png\";","import { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport shinyLogo from \"./shiny_logo.png\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [shinyMessage, setShinyMessage] = useState(\"\");\n\tconst [shinyUrls, setShinyUrls] = useState(\"\");\n\tconst [data, setData] = useState([]);\n\n\t/* Receiving the data through websocket */\n\twindow.Shiny.addCustomMessageHandler(\"message_from_shiny\", (msg) => {\n\t\tsetShinyMessage(msg);\n\t});\n\n\t/* Sending the message to Shiny through websocket */\n\tconst sendMessage = (e) => {\n\t\twindow.Shiny.setInputValue(\"message_from_react\", e.target.value);\n\t};\n\n\t/* Receiving REST API URLs */\n\twindow.Shiny.addCustomMessageHandler(\"urls\", (urls) => {\n\t\tsetShinyUrls(urls);\n\t\tfetchData(urls);\n\t});\n\n\tconst fetchData = async (urls) => {\n\t\tconst fetchedData = await fetch(urls.example_get_data_url).then((data) =>\n\t\t\tdata.json()\n\t\t);\n\t\tsetData(fetchedData);\n\t};\n\n\tconst item_list = data.map((item) => (\n\t\t<li key={item.PID}>{`${item.county} (${item.state})`}</li>\n\t));\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<img src={shinyLogo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tI AM THE MESSAGE FROM REACT\n\t\t\t\t\t<br />\n\t\t\t\t\t<i>whereas</i>\n\t\t\t\t\t<br />\n\t\t\t\t\t{shinyMessage}\n\t\t\t\t\t<br />\n\t\t\t\t\t<i>but hey, you can send message back to Shiny (check your logs):</i>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input type=\"text\" onChange={sendMessage} />\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tAnd here <code>ggplot</code> fetched from Shiny:\n\t\t\t\t</p>\n\t\t\t\t<img src={shinyUrls.ggplot_url_svg} alt=\"GGPLOT2\" />\n\t\t\t\t<p>\n\t\t\t\t\tAnd below counties from <code>midwest</code> dataset fetched from Shiny:\n\t\t\t\t</p>\n\t\t\t\t<ul>{item_list}</ul>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}